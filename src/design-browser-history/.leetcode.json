{
  "title_slug": "design-browser-history",
  "title": "Design Browser History",
  "code_snippets": [
    {
      "lang": "C++",
      "langSlug": "cpp",
      "code": "class BrowserHistory {\npublic:\n    BrowserHistory(string homepage) {\n        \n    }\n    \n    void visit(string url) {\n        \n    }\n    \n    string back(int steps) {\n        \n    }\n    \n    string forward(int steps) {\n        \n    }\n};\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * BrowserHistory* obj = new BrowserHistory(homepage);\n * obj->visit(url);\n * string param_2 = obj->back(steps);\n * string param_3 = obj->forward(steps);\n */",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Java",
      "langSlug": "java",
      "code": "class BrowserHistory {\n\n    public BrowserHistory(String homepage) {\n        \n    }\n    \n    public void visit(String url) {\n        \n    }\n    \n    public String back(int steps) {\n        \n    }\n    \n    public String forward(int steps) {\n        \n    }\n}\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * BrowserHistory obj = new BrowserHistory(homepage);\n * obj.visit(url);\n * String param_2 = obj.back(steps);\n * String param_3 = obj.forward(steps);\n */",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Python",
      "langSlug": "python",
      "code": "class BrowserHistory(object):\n\n    def __init__(self, homepage):\n        \"\"\"\n        :type homepage: str\n        \"\"\"\n        \n\n    def visit(self, url):\n        \"\"\"\n        :type url: str\n        :rtype: None\n        \"\"\"\n        \n\n    def back(self, steps):\n        \"\"\"\n        :type steps: int\n        :rtype: str\n        \"\"\"\n        \n\n    def forward(self, steps):\n        \"\"\"\n        :type steps: int\n        :rtype: str\n        \"\"\"\n        \n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Python3",
      "langSlug": "python3",
      "code": "class BrowserHistory:\n\n    def __init__(self, homepage: str):\n        \n\n    def visit(self, url: str) -> None:\n        \n\n    def back(self, steps: int) -> str:\n        \n\n    def forward(self, steps: int) -> str:\n        \n\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "C",
      "langSlug": "c",
      "code": "\n\n\ntypedef struct {\n    \n} BrowserHistory;\n\n\nBrowserHistory* browserHistoryCreate(char * homepage) {\n    \n}\n\nvoid browserHistoryVisit(BrowserHistory* obj, char * url) {\n  \n}\n\nchar * browserHistoryBack(BrowserHistory* obj, int steps) {\n  \n}\n\nchar * browserHistoryForward(BrowserHistory* obj, int steps) {\n  \n}\n\nvoid browserHistoryFree(BrowserHistory* obj) {\n    \n}\n\n/**\n * Your BrowserHistory struct will be instantiated and called as such:\n * BrowserHistory* obj = browserHistoryCreate(homepage);\n * browserHistoryVisit(obj, url);\n \n * char * param_2 = browserHistoryBack(obj, steps);\n \n * char * param_3 = browserHistoryForward(obj, steps);\n \n * browserHistoryFree(obj);\n*/",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "C#",
      "langSlug": "csharp",
      "code": "public class BrowserHistory {\n\n    public BrowserHistory(string homepage) {\n        \n    }\n    \n    public void Visit(string url) {\n        \n    }\n    \n    public string Back(int steps) {\n        \n    }\n    \n    public string Forward(int steps) {\n        \n    }\n}\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * BrowserHistory obj = new BrowserHistory(homepage);\n * obj.Visit(url);\n * string param_2 = obj.Back(steps);\n * string param_3 = obj.Forward(steps);\n */",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "JavaScript",
      "langSlug": "javascript",
      "code": "/**\n * @param {string} homepage\n */\nvar BrowserHistory = function(homepage) {\n    \n};\n\n/** \n * @param {string} url\n * @return {void}\n */\nBrowserHistory.prototype.visit = function(url) {\n    \n};\n\n/** \n * @param {number} steps\n * @return {string}\n */\nBrowserHistory.prototype.back = function(steps) {\n    \n};\n\n/** \n * @param {number} steps\n * @return {string}\n */\nBrowserHistory.prototype.forward = function(steps) {\n    \n};\n\n/** \n * Your BrowserHistory object will be instantiated and called as such:\n * var obj = new BrowserHistory(homepage)\n * obj.visit(url)\n * var param_2 = obj.back(steps)\n * var param_3 = obj.forward(steps)\n */",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "TypeScript",
      "langSlug": "typescript",
      "code": "class BrowserHistory {\n    constructor(homepage: string) {\n\n    }\n\n    visit(url: string): void {\n\n    }\n\n    back(steps: number): string {\n\n    }\n\n    forward(steps: number): string {\n\n    }\n}\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * var obj = new BrowserHistory(homepage)\n * obj.visit(url)\n * var param_2 = obj.back(steps)\n * var param_3 = obj.forward(steps)\n */",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "PHP",
      "langSlug": "php",
      "code": "class BrowserHistory {\n    /**\n     * @param String $homepage\n     */\n    function __construct($homepage) {\n        \n    }\n  \n    /**\n     * @param String $url\n     * @return NULL\n     */\n    function visit($url) {\n        \n    }\n  \n    /**\n     * @param Integer $steps\n     * @return String\n     */\n    function back($steps) {\n        \n    }\n  \n    /**\n     * @param Integer $steps\n     * @return String\n     */\n    function forward($steps) {\n        \n    }\n}\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * $obj = BrowserHistory($homepage);\n * $obj->visit($url);\n * $ret_2 = $obj->back($steps);\n * $ret_3 = $obj->forward($steps);\n */",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Swift",
      "langSlug": "swift",
      "code": "\nclass BrowserHistory {\n\n    init(_ homepage: String) {\n        \n    }\n    \n    func visit(_ url: String) {\n        \n    }\n    \n    func back(_ steps: Int) -> String {\n        \n    }\n    \n    func forward(_ steps: Int) -> String {\n        \n    }\n}\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * let obj = BrowserHistory(homepage)\n * obj.visit(url)\n * let ret_2: String = obj.back(steps)\n * let ret_3: String = obj.forward(steps)\n */",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Kotlin",
      "langSlug": "kotlin",
      "code": "class BrowserHistory(homepage: String) {\n\n    fun visit(url: String) {\n        \n    }\n\n    fun back(steps: Int): String {\n        \n    }\n\n    fun forward(steps: Int): String {\n        \n    }\n\n}\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * var obj = BrowserHistory(homepage)\n * obj.visit(url)\n * var param_2 = obj.back(steps)\n * var param_3 = obj.forward(steps)\n */",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Dart",
      "langSlug": "dart",
      "code": "class BrowserHistory {\n\n  BrowserHistory(String homepage) {\n\n  }\n  \n  void visit(String url) {\n\n  }\n  \n  String back(int steps) {\n\n  }\n  \n  String forward(int steps) {\n\n  }\n}\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * BrowserHistory obj = BrowserHistory(homepage);\n * obj.visit(url);\n * String param2 = obj.back(steps);\n * String param3 = obj.forward(steps);\n */",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Go",
      "langSlug": "golang",
      "code": "type BrowserHistory struct {\n    \n}\n\n\nfunc Constructor(homepage string) BrowserHistory {\n    \n}\n\n\nfunc (this *BrowserHistory) Visit(url string)  {\n    \n}\n\n\nfunc (this *BrowserHistory) Back(steps int) string {\n    \n}\n\n\nfunc (this *BrowserHistory) Forward(steps int) string {\n    \n}\n\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * obj := Constructor(homepage);\n * obj.Visit(url);\n * param_2 := obj.Back(steps);\n * param_3 := obj.Forward(steps);\n */",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Ruby",
      "langSlug": "ruby",
      "code": "class BrowserHistory\n\n=begin\n    :type homepage: String\n=end\n    def initialize(homepage)\n        \n    end\n\n\n=begin\n    :type url: String\n    :rtype: Void\n=end\n    def visit(url)\n        \n    end\n\n\n=begin\n    :type steps: Integer\n    :rtype: String\n=end\n    def back(steps)\n        \n    end\n\n\n=begin\n    :type steps: Integer\n    :rtype: String\n=end\n    def forward(steps)\n        \n    end\n\n\nend\n\n# Your BrowserHistory object will be instantiated and called as such:\n# obj = BrowserHistory.new(homepage)\n# obj.visit(url)\n# param_2 = obj.back(steps)\n# param_3 = obj.forward(steps)",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Scala",
      "langSlug": "scala",
      "code": "class BrowserHistory(_homepage: String) {\n\n    def visit(url: String) {\n        \n    }\n\n    def back(steps: Int): String = {\n        \n    }\n\n    def forward(steps: Int): String = {\n        \n    }\n\n}\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * var obj = new BrowserHistory(homepage)\n * obj.visit(url)\n * var param_2 = obj.back(steps)\n * var param_3 = obj.forward(steps)\n */",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Rust",
      "langSlug": "rust",
      "code": "struct BrowserHistory {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl BrowserHistory {\n\n    fn new(homepage: String) -> Self {\n        \n    }\n    \n    fn visit(&self, url: String) {\n        \n    }\n    \n    fn back(&self, steps: i32) -> String {\n        \n    }\n    \n    fn forward(&self, steps: i32) -> String {\n        \n    }\n}\n\n/**\n * Your BrowserHistory object will be instantiated and called as such:\n * let obj = BrowserHistory::new(homepage);\n * obj.visit(url);\n * let ret_2: String = obj.back(steps);\n * let ret_3: String = obj.forward(steps);\n */",
      "__typename": "CodeSnippetNode"
    }
  ],
  "content": "<p>You have a <strong>browser</strong> of one tab where you start on the <code>homepage</code> and you can visit another <code>url</code>, get back in the history number of <code>steps</code> or move forward in the history number of <code>steps</code>.</p>\n\n<p>Implement the <code>BrowserHistory</code> class:</p>\n\n<ul>\n\t<li><code>BrowserHistory(string homepage)</code> Initializes the object with the <code>homepage</code>&nbsp;of the browser.</li>\n\t<li><code>void visit(string url)</code>&nbsp;Visits&nbsp;<code>url</code> from the current page. It clears up all the forward history.</li>\n\t<li><code>string back(int steps)</code>&nbsp;Move <code>steps</code> back in history. If you can only return <code>x</code> steps in the history and <code>steps &gt; x</code>, you will&nbsp;return only <code>x</code> steps. Return the current <code>url</code>&nbsp;after moving back in history <strong>at most</strong> <code>steps</code>.</li>\n\t<li><code>string forward(int steps)</code>&nbsp;Move <code>steps</code> forward in history. If you can only forward <code>x</code> steps in the history and <code>steps &gt; x</code>, you will&nbsp;forward only&nbsp;<code>x</code> steps. Return the current <code>url</code>&nbsp;after forwarding in history <strong>at most</strong> <code>steps</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example:</strong></p>\n\n<pre>\n<b>Input:</b>\n[&quot;BrowserHistory&quot;,&quot;visit&quot;,&quot;visit&quot;,&quot;visit&quot;,&quot;back&quot;,&quot;back&quot;,&quot;forward&quot;,&quot;visit&quot;,&quot;forward&quot;,&quot;back&quot;,&quot;back&quot;]\n[[&quot;leetcode.com&quot;],[&quot;google.com&quot;],[&quot;facebook.com&quot;],[&quot;youtube.com&quot;],[1],[1],[1],[&quot;linkedin.com&quot;],[2],[2],[7]]\n<b>Output:</b>\n[null,null,null,null,&quot;facebook.com&quot;,&quot;google.com&quot;,&quot;facebook.com&quot;,null,&quot;linkedin.com&quot;,&quot;google.com&quot;,&quot;leetcode.com&quot;]\n\n<b>Explanation:</b>\nBrowserHistory browserHistory = new BrowserHistory(&quot;leetcode.com&quot;);\nbrowserHistory.visit(&quot;google.com&quot;);       // You are in &quot;leetcode.com&quot;. Visit &quot;google.com&quot;\nbrowserHistory.visit(&quot;facebook.com&quot;);     // You are in &quot;google.com&quot;. Visit &quot;facebook.com&quot;\nbrowserHistory.visit(&quot;youtube.com&quot;);      // You are in &quot;facebook.com&quot;. Visit &quot;youtube.com&quot;\nbrowserHistory.back(1);                   // You are in &quot;youtube.com&quot;, move back to &quot;facebook.com&quot; return &quot;facebook.com&quot;\nbrowserHistory.back(1);                   // You are in &quot;facebook.com&quot;, move back to &quot;google.com&quot; return &quot;google.com&quot;\nbrowserHistory.forward(1);                // You are in &quot;google.com&quot;, move forward to &quot;facebook.com&quot; return &quot;facebook.com&quot;\nbrowserHistory.visit(&quot;linkedin.com&quot;);     // You are in &quot;facebook.com&quot;. Visit &quot;linkedin.com&quot;\nbrowserHistory.forward(2);                // You are in &quot;linkedin.com&quot;, you cannot move forward any steps.\nbrowserHistory.back(2);                   // You are in &quot;linkedin.com&quot;, move back two steps to &quot;facebook.com&quot; then to &quot;google.com&quot;. return &quot;google.com&quot;\nbrowserHistory.back(7);                   // You are in &quot;google.com&quot;, you can move back only one step to &quot;leetcode.com&quot;. return &quot;leetcode.com&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= homepage.length &lt;= 20</code></li>\n\t<li><code>1 &lt;= url.length &lt;= 20</code></li>\n\t<li><code>1 &lt;= steps &lt;= 100</code></li>\n\t<li><code>homepage</code> and <code>url</code> consist of&nbsp; &#39;.&#39; or lower case English letters.</li>\n\t<li>At most <code>5000</code>&nbsp;calls will be made to <code>visit</code>, <code>back</code>, and <code>forward</code>.</li>\n</ul>\n",
  "question_id": 1582,
  "question_frontend_id": 1472,
  "difficulty": "Medium",
  "likes": 3596,
  "dislikes": 210,
  "sample_test_case": "[\"BrowserHistory\",\"visit\",\"visit\",\"visit\",\"back\",\"back\",\"forward\",\"visit\",\"forward\",\"back\",\"back\"]\n[[\"leetcode.com\"],[\"google.com\"],[\"facebook.com\"],[\"youtube.com\"],[1],[1],[1],[\"linkedin.com\"],[2],[2],[7]]"
}