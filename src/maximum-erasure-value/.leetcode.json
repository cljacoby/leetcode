{
  "title_slug": "maximum-erasure-value",
  "title": "Maximum Erasure Value",
  "code_snippets": [
    {
      "lang": "C++",
      "langSlug": "cpp",
      "code": "class Solution {\npublic:\n    int maximumUniqueSubarray(vector<int>& nums) {\n        \n    }\n};",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Java",
      "langSlug": "java",
      "code": "class Solution {\n    public int maximumUniqueSubarray(int[] nums) {\n        \n    }\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Python",
      "langSlug": "python",
      "code": "class Solution(object):\n    def maximumUniqueSubarray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Python3",
      "langSlug": "python3",
      "code": "class Solution:\n    def maximumUniqueSubarray(self, nums: List[int]) -> int:\n        ",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "C",
      "langSlug": "c",
      "code": "int maximumUniqueSubarray(int* nums, int numsSize) {\n    \n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "C#",
      "langSlug": "csharp",
      "code": "public class Solution {\n    public int MaximumUniqueSubarray(int[] nums) {\n        \n    }\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "JavaScript",
      "langSlug": "javascript",
      "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maximumUniqueSubarray = function(nums) {\n    \n};",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "TypeScript",
      "langSlug": "typescript",
      "code": "function maximumUniqueSubarray(nums: number[]): number {\n    \n};",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "PHP",
      "langSlug": "php",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maximumUniqueSubarray($nums) {\n        \n    }\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Swift",
      "langSlug": "swift",
      "code": "class Solution {\n    func maximumUniqueSubarray(_ nums: [Int]) -> Int {\n        \n    }\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Kotlin",
      "langSlug": "kotlin",
      "code": "class Solution {\n    fun maximumUniqueSubarray(nums: IntArray): Int {\n        \n    }\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Dart",
      "langSlug": "dart",
      "code": "class Solution {\n  int maximumUniqueSubarray(List<int> nums) {\n    \n  }\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Go",
      "langSlug": "golang",
      "code": "func maximumUniqueSubarray(nums []int) int {\n    \n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Ruby",
      "langSlug": "ruby",
      "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef maximum_unique_subarray(nums)\n    \nend",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Scala",
      "langSlug": "scala",
      "code": "object Solution {\n    def maximumUniqueSubarray(nums: Array[Int]): Int = {\n        \n    }\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Rust",
      "langSlug": "rust",
      "code": "impl Solution {\n    pub fn maximum_unique_subarray(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Racket",
      "langSlug": "racket",
      "code": "(define/contract (maximum-unique-subarray nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Erlang",
      "langSlug": "erlang",
      "code": "-spec maximum_unique_subarray(Nums :: [integer()]) -> integer().\nmaximum_unique_subarray(Nums) ->\n  .",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Elixir",
      "langSlug": "elixir",
      "code": "defmodule Solution do\n  @spec maximum_unique_subarray(nums :: [integer]) :: integer\n  def maximum_unique_subarray(nums) do\n    \n  end\nend",
      "__typename": "CodeSnippetNode"
    }
  ],
  "content": "<p>You are given an array of positive integers <code>nums</code> and want to erase a subarray containing&nbsp;<strong>unique elements</strong>. The <strong>score</strong> you get by erasing the subarray is equal to the <strong>sum</strong> of its elements.</p>\n\n<p>Return <em>the <strong>maximum score</strong> you can get by erasing <strong>exactly one</strong> subarray.</em></p>\n\n<p>An array <code>b</code> is called to be a <span class=\"tex-font-style-it\">subarray</span> of <code>a</code> if it forms a contiguous subsequence of <code>a</code>, that is, if it is equal to <code>a[l],a[l+1],...,a[r]</code> for some <code>(l,r)</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,2,4,5,6]\n<strong>Output:</strong> 17\n<strong>Explanation:</strong> The optimal subarray here is [2,4,5,6].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,2,1,2,5,2,1,2,5]\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> The optimal subarray here is [5,2,1] or [1,2,5].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
  "question_id": 1813,
  "question_frontend_id": 1695,
  "difficulty": "Medium",
  "likes": 3297,
  "dislikes": 61,
  "sample_test_case": "[4,2,4,5,6]"
}