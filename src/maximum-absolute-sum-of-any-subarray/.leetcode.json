{
  "title_slug": "maximum-absolute-sum-of-any-subarray",
  "title": "Maximum Absolute Sum of Any Subarray",
  "code_snippets": [
    {
      "lang": "C++",
      "langSlug": "cpp",
      "code": "class Solution {\npublic:\n    int maxAbsoluteSum(vector<int>& nums) {\n        \n    }\n};",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Java",
      "langSlug": "java",
      "code": "class Solution {\n    public int maxAbsoluteSum(int[] nums) {\n        \n    }\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Python",
      "langSlug": "python",
      "code": "class Solution(object):\n    def maxAbsoluteSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        ",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Python3",
      "langSlug": "python3",
      "code": "class Solution:\n    def maxAbsoluteSum(self, nums: List[int]) -> int:\n        ",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "C",
      "langSlug": "c",
      "code": "int maxAbsoluteSum(int* nums, int numsSize) {\n    \n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "C#",
      "langSlug": "csharp",
      "code": "public class Solution {\n    public int MaxAbsoluteSum(int[] nums) {\n        \n    }\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "JavaScript",
      "langSlug": "javascript",
      "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maxAbsoluteSum = function(nums) {\n    \n};",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "TypeScript",
      "langSlug": "typescript",
      "code": "function maxAbsoluteSum(nums: number[]): number {\n    \n};",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "PHP",
      "langSlug": "php",
      "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maxAbsoluteSum($nums) {\n        \n    }\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Swift",
      "langSlug": "swift",
      "code": "class Solution {\n    func maxAbsoluteSum(_ nums: [Int]) -> Int {\n        \n    }\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Kotlin",
      "langSlug": "kotlin",
      "code": "class Solution {\n    fun maxAbsoluteSum(nums: IntArray): Int {\n        \n    }\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Dart",
      "langSlug": "dart",
      "code": "class Solution {\n  int maxAbsoluteSum(List<int> nums) {\n    \n  }\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Go",
      "langSlug": "golang",
      "code": "func maxAbsoluteSum(nums []int) int {\n    \n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Ruby",
      "langSlug": "ruby",
      "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef max_absolute_sum(nums)\n    \nend",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Scala",
      "langSlug": "scala",
      "code": "object Solution {\n    def maxAbsoluteSum(nums: Array[Int]): Int = {\n        \n    }\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Rust",
      "langSlug": "rust",
      "code": "impl Solution {\n    pub fn max_absolute_sum(nums: Vec<i32>) -> i32 {\n        \n    }\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Racket",
      "langSlug": "racket",
      "code": "(define/contract (max-absolute-sum nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Erlang",
      "langSlug": "erlang",
      "code": "-spec max_absolute_sum(Nums :: [integer()]) -> integer().\nmax_absolute_sum(Nums) ->\n  .",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Elixir",
      "langSlug": "elixir",
      "code": "defmodule Solution do\n  @spec max_absolute_sum(nums :: [integer]) :: integer\n  def max_absolute_sum(nums) do\n    \n  end\nend",
      "__typename": "CodeSnippetNode"
    }
  ],
  "content": "<p>You are given an integer array <code>nums</code>. The <strong>absolute sum</strong> of a subarray <code>[nums<sub>l</sub>, nums<sub>l+1</sub>, ..., nums<sub>r-1</sub>, nums<sub>r</sub>]</code> is <code>abs(nums<sub>l</sub> + nums<sub>l+1</sub> + ... + nums<sub>r-1</sub> + nums<sub>r</sub>)</code>.</p>\n\n<p>Return <em>the <strong>maximum</strong> absolute sum of any <strong>(possibly empty)</strong> subarray of </em><code>nums</code>.</p>\n\n<p>Note that <code>abs(x)</code> is defined as follows:</p>\n\n<ul>\n\t<li>If <code>x</code> is a negative integer, then <code>abs(x) = -x</code>.</li>\n\t<li>If <code>x</code> is a non-negative integer, then <code>abs(x) = x</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,-3,2,3,-4]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The subarray [2,3] has absolute sum = abs(2+3) = abs(5) = 5.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,-5,1,-4,3,-2]\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> The subarray [-5,1,-4] has absolute sum = abs(-5+1-4) = abs(-8) = 8.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
  "question_id": 1849,
  "question_frontend_id": 1749,
  "difficulty": "Medium",
  "likes": 1832,
  "dislikes": 38,
  "sample_test_case": "[1,-3,2,3,-4]"
}