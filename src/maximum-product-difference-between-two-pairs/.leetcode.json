{
  "title_slug": "maximum-product-difference-between-two-pairs",
  "title": "Maximum Product Difference Between Two Pairs",
  "code_snippets": [
    {
      "lang": "C++",
      "langSlug": "cpp",
      "code": "class Solution {\r\npublic:\r\n    int maxProductDifference(vector<int>& nums) {\r\n        \r\n    }\r\n};",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Java",
      "langSlug": "java",
      "code": "class Solution {\r\n    public int maxProductDifference(int[] nums) {\r\n        \r\n    }\r\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Python",
      "langSlug": "python",
      "code": "class Solution(object):\r\n    def maxProductDifference(self, nums):\r\n        \"\"\"\r\n        :type nums: List[int]\r\n        :rtype: int\r\n        \"\"\"",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Python3",
      "langSlug": "python3",
      "code": "class Solution:\r\n    def maxProductDifference(self, nums: List[int]) -> int:",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "C",
      "langSlug": "c",
      "code": "int maxProductDifference(int* nums, int numsSize){\r\n\r\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "C#",
      "langSlug": "csharp",
      "code": "public class Solution {\r\n    public int MaxProductDifference(int[] nums) {\r\n        \r\n    }\r\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "JavaScript",
      "langSlug": "javascript",
      "code": "/**\r\n * @param {number[]} nums\r\n * @return {number}\r\n */\r\nvar maxProductDifference = function(nums) {\r\n    \r\n};",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "TypeScript",
      "langSlug": "typescript",
      "code": "function maxProductDifference(nums: number[]): number {\r\n\r\n};",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "PHP",
      "langSlug": "php",
      "code": "class Solution {\r\n\r\n    /**\r\n     * @param Integer[] $nums\r\n     * @return Integer\r\n     */\r\n    function maxProductDifference($nums) {\r\n        \r\n    }\r\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Swift",
      "langSlug": "swift",
      "code": "class Solution {\r\n    func maxProductDifference(_ nums: [Int]) -> Int {\r\n        \r\n    }\r\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Kotlin",
      "langSlug": "kotlin",
      "code": "class Solution {\r\n    fun maxProductDifference(nums: IntArray): Int {\r\n        \r\n    }\r\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Go",
      "langSlug": "golang",
      "code": "func maxProductDifference(nums []int) int {\r\n    \r\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Ruby",
      "langSlug": "ruby",
      "code": "# @param {Integer[]} nums\r\n# @return {Integer}\r\ndef max_product_difference(nums)\r\n    \r\nend",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Scala",
      "langSlug": "scala",
      "code": "object Solution {\r\n    def maxProductDifference(nums: Array[Int]): Int = {\r\n        \r\n    }\r\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Rust",
      "langSlug": "rust",
      "code": "impl Solution {\r\n    pub fn max_product_difference(nums: Vec<i32>) -> i32 {\r\n        \r\n    }\r\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Racket",
      "langSlug": "racket",
      "code": "(define/contract (max-product-difference nums)\r\n  (-> (listof exact-integer?) exact-integer?)\r\n\r\n  )",
      "__typename": "CodeSnippetNode"
    }
  ],
  "content": "<p>The <strong>product difference</strong> between two pairs <code>(a, b)</code> and <code>(c, d)</code> is defined as <code>(a * b) - (c * d)</code>.</p>\r\n\r\n<ul>\r\n\t<li>For example, the product difference between <code>(5, 6)</code> and <code>(2, 7)</code> is <code>(5 * 6) - (2 * 7) = 16</code>.</li>\r\n</ul>\r\n\r\n<p>Given an integer array <code>nums</code>, choose four <strong>distinct</strong> indices <code>w</code>, <code>x</code>, <code>y</code>, and <code>z</code> such that the <strong>product difference</strong> between pairs <code>(nums[w], nums[x])</code> and <code>(nums[y], nums[z])</code> is <strong>maximized</strong>.</p>\r\n\r\n<p>Return <em>the <strong>maximum</strong> such product difference</em>.</p>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong class=\"example\">Example 1:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [5,6,2,7,4]\r\n<strong>Output:</strong> 34\r\n<strong>Explanation:</strong> We can choose indices 1 and 3 for the first pair (6, 7) and indices 2 and 4 for the second pair (2, 4).\r\nThe product difference is (6 * 7) - (2 * 4) = 34.\r\n</pre>\r\n\r\n<p><strong class=\"example\">Example 2:</strong></p>\r\n\r\n<pre>\r\n<strong>Input:</strong> nums = [4,2,5,9,7,4,8]\r\n<strong>Output:</strong> 64\r\n<strong>Explanation:</strong> We can choose indices 3 and 6 for the first pair (9, 8) and indices 1 and 5 for the second pair (2, 4).\r\nThe product difference is (9 * 8) - (2 * 4) = 64.\r\n</pre>\r\n\r\n<p>&nbsp;</p>\r\n<p><strong>Constraints:</strong></p>\r\n\r\n<ul>\r\n\t<li><code>4 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\r\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\r\n</ul>",
  "question_id": 2042,
  "question_frontend_id": 1913,
  "difficulty": "Easy",
  "likes": 1436,
  "dislikes": 63,
  "sample_test_case": "[5,6,2,7,4]"
}