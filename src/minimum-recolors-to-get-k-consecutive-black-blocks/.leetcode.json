{
  "title_slug": "minimum-recolors-to-get-k-consecutive-black-blocks",
  "title": "Minimum Recolors to Get K Consecutive Black Blocks",
  "code_snippets": [
    {
      "lang": "C++",
      "langSlug": "cpp",
      "code": "class Solution {\npublic:\n    int minimumRecolors(string blocks, int k) {\n        \n    }\n};",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Java",
      "langSlug": "java",
      "code": "class Solution {\n    public int minimumRecolors(String blocks, int k) {\n        \n    }\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Python",
      "langSlug": "python",
      "code": "class Solution(object):\n    def minimumRecolors(self, blocks, k):\n        \"\"\"\n        :type blocks: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        ",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Python3",
      "langSlug": "python3",
      "code": "class Solution:\n    def minimumRecolors(self, blocks: str, k: int) -> int:\n        ",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "C",
      "langSlug": "c",
      "code": "int minimumRecolors(char* blocks, int k) {\n    \n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "C#",
      "langSlug": "csharp",
      "code": "public class Solution {\n    public int MinimumRecolors(string blocks, int k) {\n        \n    }\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "JavaScript",
      "langSlug": "javascript",
      "code": "/**\n * @param {string} blocks\n * @param {number} k\n * @return {number}\n */\nvar minimumRecolors = function(blocks, k) {\n    \n};",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "TypeScript",
      "langSlug": "typescript",
      "code": "function minimumRecolors(blocks: string, k: number): number {\n    \n};",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "PHP",
      "langSlug": "php",
      "code": "class Solution {\n\n    /**\n     * @param String $blocks\n     * @param Integer $k\n     * @return Integer\n     */\n    function minimumRecolors($blocks, $k) {\n        \n    }\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Swift",
      "langSlug": "swift",
      "code": "class Solution {\n    func minimumRecolors(_ blocks: String, _ k: Int) -> Int {\n        \n    }\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Kotlin",
      "langSlug": "kotlin",
      "code": "class Solution {\n    fun minimumRecolors(blocks: String, k: Int): Int {\n        \n    }\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Dart",
      "langSlug": "dart",
      "code": "class Solution {\n  int minimumRecolors(String blocks, int k) {\n    \n  }\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Go",
      "langSlug": "golang",
      "code": "func minimumRecolors(blocks string, k int) int {\n    \n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Ruby",
      "langSlug": "ruby",
      "code": "# @param {String} blocks\n# @param {Integer} k\n# @return {Integer}\ndef minimum_recolors(blocks, k)\n    \nend",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Scala",
      "langSlug": "scala",
      "code": "object Solution {\n    def minimumRecolors(blocks: String, k: Int): Int = {\n        \n    }\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Rust",
      "langSlug": "rust",
      "code": "impl Solution {\n    pub fn minimum_recolors(blocks: String, k: i32) -> i32 {\n        \n    }\n}",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Racket",
      "langSlug": "racket",
      "code": "(define/contract (minimum-recolors blocks k)\n  (-> string? exact-integer? exact-integer?)\n  )",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Erlang",
      "langSlug": "erlang",
      "code": "-spec minimum_recolors(Blocks :: unicode:unicode_binary(), K :: integer()) -> integer().\nminimum_recolors(Blocks, K) ->\n  .",
      "__typename": "CodeSnippetNode"
    },
    {
      "lang": "Elixir",
      "langSlug": "elixir",
      "code": "defmodule Solution do\n  @spec minimum_recolors(blocks :: String.t, k :: integer) :: integer\n  def minimum_recolors(blocks, k) do\n    \n  end\nend",
      "__typename": "CodeSnippetNode"
    }
  ],
  "content": "<p>You are given a <strong>0-indexed</strong> string <code>blocks</code> of length <code>n</code>, where <code>blocks[i]</code> is either <code>&#39;W&#39;</code> or <code>&#39;B&#39;</code>, representing the color of the <code>i<sup>th</sup></code> block. The characters <code>&#39;W&#39;</code> and <code>&#39;B&#39;</code> denote the colors white and black, respectively.</p>\n\n<p>You are also given an integer <code>k</code>, which is the desired number of <strong>consecutive</strong> black blocks.</p>\n\n<p>In one operation, you can <strong>recolor</strong> a white block such that it becomes a black block.</p>\n\n<p>Return<em> the <strong>minimum</strong> number of operations needed such that there is at least <strong>one</strong> occurrence of </em><code>k</code><em> consecutive black blocks.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> blocks = &quot;WBBWWBBWBW&quot;, k = 7\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nOne way to achieve 7 consecutive black blocks is to recolor the 0th, 3rd, and 4th blocks\nso that blocks = &quot;BBBBBBBWBW&quot;. \nIt can be shown that there is no way to achieve 7 consecutive black blocks in less than 3 operations.\nTherefore, we return 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> blocks = &quot;WBWBBBW&quot;, k = 2\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>\nNo changes need to be made, since 2 consecutive black blocks already exist.\nTherefore, we return 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == blocks.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>blocks[i]</code> is either <code>&#39;W&#39;</code> or <code>&#39;B&#39;</code>.</li>\n\t<li><code>1 &lt;= k &lt;= n</code></li>\n</ul>\n",
  "question_id": 2463,
  "question_frontend_id": 2379,
  "difficulty": "Easy",
  "likes": 1212,
  "dislikes": 36,
  "sample_test_case": "\"WBBWWBBWBW\"\n7"
}